Day 1
------------------------
Introduction to NodeJS

JS runtime built on top of Chrome's V8 engine
Building highly scalable, network and distributed app
IO-bound applications not for CPU-bound
IO- files/db/http/MQ
server-side JS not client-side (not for DOM manipulation)

Latest LTS version - 12.19.0

major.minor.patch
Semantic versioning

Java - JRE
Python - PVM

JS engines
	IE - chakra
	FF - SpiderMonkey
	CH - V8

ECMAScript
	ES5 - modern browsers support (JSON.stringify, array - map, filter....)
	ES6 (ES2015) - let, const, for of, ``, class, module.......
	ES7 - **, includes
	ES8 - async/await
	ES9
	ES2020

Transpiler
	Babel, Traceur, tsc

node
> 1+2

REPL - Read/Eval/Print/Loop

Setup
--------------
File > autosave

Extensions 
	prettier 
		File > preferences > settings > text editor > formatting
	node-snippets
	angular-snippets
	Bootstrap 4

Node packages
	npm i -g nodemon
	


Features
-------------------
Single threaded
asynchronous non-blocking IO
Event loop
Streams
Event-driven

Traditional web app Vs Node web app
------------------------------------------------------------



Module System
-------------------------
1. core modules
2. Third-party 
3. Custom

Core modules
---------------------------
fs, http, os, child_process, cluster

Third-party modules
------------------------------------
> npm commands

npm init -> To create a package.json
npm init -y -> immediately without questions
npm i mocha --save-dev  -> dev dep in package.json
npm i express    -> prod dep in package.json
npm i -g nodemon -> global installation
npm i -> Installs all pkg listed in package.json file
npm i -only=prod
npm i -only=dev
npm ls
npm ls --depth=0
npm ls -g
npm update express@3.0.0
npm uninstall express


Custom modules
--------------------------
calc.js
	module.exports=(a,b)=>a+b;

testcalc.js
	const sum=require("./calc")
	console.log(sum(3,4));






Asynchronous programming techniques
------------------------------------------------------------
1. Callbacks
2. Promise (ES6)
3. async/await (ES8)

functional programming concepts

ACtivity
----------------
1. Create a Http server to serve the file data.txt 
2. Create a node app to copy source file into dest
3. Create a Http server to serve the below requests
	1. If req is "/", respond with Hello World
	2. If req is "/greet", respond with HTML bold tag "Welcome"
Hint : Use req.url to check the path of incoming request
4. Write a higher order function greeter with 2 args - callback, name, message

5. Use books.json and search books by the given criteria
	By title
	By category
	By rating
	
6. Store the above functionalities in a book module and export them
    In book_test.js, call and test the functionalities

7. Create a Http server to make calls to fake API using axios. Send the response to the client
	https://jsonplaceholder.typicode.com/users

Create an angular app to send a request to the Http server, get the users data and display in a table

http.get("http://localhost:8081/").subscribe(users=>this.users=users)


Day 2
--------------------------------

Monolith application
-------------------------------
single code base
single repo
single server/VM
single DB
single lang/SDK

+ simple
+ one thing to build and deploy in prod

- Scaling is difficult
- code changes involve downtime
- tight coupling
- legacy tech
- high startup time


Microservices
-------------------------------
Architectural styles
app -> collection of services

+ scalability
+ Loosely coupled
+ Easy to make changes
+ Connected via API
+ light weight
+ Language/Tool flexibility
+ CI, CD with 0 downtime


- complex
- automation of deployment is difficult
- complex interactions b/w services
- monitoring

Cloud native -> Agile&DevOPS, Microservices, Containerization, Cloud platform


Building microservices with Seneca
-------------------------------------------------------
MS toolkit for nodejs

1. pattern
2. add and act
3. code reuse
4. Plugin
5. MS using plugins

Activity
----------------
1. greet pattern taking name as input and returns welcome message
2. Create a skills service with functionalities to add unique skill, adding duplicate skill, 
and display skills. 
let skills=[]
add(...)
add(...)
add(...)
act(...)
act(...)
act(...)

3. Create an array of product objects with below fields. 
	id, name, price, rating, category
EX) let products = [{id:1,name:"Mobile",rating:4.5, category:"Electronics"},.......]
	
Create a microservice that allows to search products by name, by category and by rating
Test it using act method as well as with HTTP requests

4. Create an array wishlist with movie names
Create a MS to add, delete and list the movies

5. Under case study folder, create a subfolder microservices with 2 files
	catalog_plugin.js
	catalog_service.js
Load books from "books.json" file
Implement the below patterns. Always return an array with values or empty array
	role:"catalog",action:"searchbytitle"
	role:"catalog",action:"searchbycategory"
	role:"catalog",action:"searchbyrating"
	

DAY - 3
------------------

Express - API gateway
Mongo DB Integration
Angular Integration


Need for API gateway
---------------------------------
Request routing & response aggreegation
protocol translation
Custom APIs for each client
Caching
Cross-cutting concerns (logging, authentication, cookie, ....)

Express 
----------------------
web app (templating engines) - SSR
API 
REq-response
Middleware
DB integration
Serve static file

To create an express app
----------------------------------------
npm i -g express-generator

 express expressapp

 cd expressapp

 npm i

npm start

package.json -> start: nodemon




Day - 4
--------------
Asynchronous communication
Mock assessment
Case study


Activity
--------------
1. Call fake API from express app to handle the below routes 

/users - user list
/users/id - User with the given id
/users - If id is a query param, return the user with the given id
/books

2. Create an express app
	npm i -g express-generator
	express expressapp
	cd expressapp
	npm i 
	npm start
	Test localhost:3000/ and /users
	expressapp>package.json>start: nodemon ./bin/www

3. Add a router to handle the request with url 
	/books - To send books from books.json
Log the request URL in  file server.log  . Use appendFile of fs module


MongoDB
--------------------------
npm i seneca-entity seneca-mongo-store loadsh
  
In microservice file

const entities = require("seneca-entity");
const mongostore=require("seneca-mongo-store")
seneca.quiet();
seneca.use(entities);
seneca.use(mongostore, {
    name: "mybookstore",
    host: "127.0.0.1",
    port:27017
})

In plugin file

const booksEntity = this.make$("books")
        booksEntity.list$({ title: args.title }, (err, books) => {     
            respond(null, books);
        })

In express app

const seneca = require("seneca")();
const entities = require("seneca-entity");
seneca.use(entities)
seneca.client(8585);

router.get('/title/:title', function(req, res, next) {
  seneca.act({role : "catalog",action :"searchbyname", name:req.params.title},(err,books) => {
    if(err)
      return console.error(err);
    console.log(books)
    res.send(books);
})
});




Day 5
--------------
Practice
Main assessment






